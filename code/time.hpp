/***********************************************************************************************************************
 * @file
 * @brief For time-related things.
 **********************************************************************************************************************/

#pragma once




namespace n_tdg::n_time
{

/***********************************************************************************************************************
 * @brief Handles time-related stuff such as the delta-time's calculation and the framerate cap.
 * Called on the start of every main tick, meaning, at the start of the program's main loop.
 **********************************************************************************************************************/
void fg_handleTimingOfMainTick();

/***********************************************************************************************************************
 * @return The real delta time, which is unaffected by the delta-time scale.
 **********************************************************************************************************************/
float fg_getRealDTime();

/***********************************************************************************************************************
 * @return The delta time, which is multiplied by the delta-time scale.
 **********************************************************************************************************************/
float fg_getDTime();

/***********************************************************************************************************************
 * @return The delta-time scale.
 **********************************************************************************************************************/
float fg_getDTimeScale();

/***********************************************************************************************************************
 * @brief Sets the delta-time scale to the given value.
 * @param p_val The new value of the delta-time scale. Should not be negative.
 **********************************************************************************************************************/
void fg_setDTimeScale(float p_val);

/***********************************************************************************************************************
 * @return The tick-rate cap. -1 means that the cap is disabled.
 * @sa fg_setTickRateCap
 **********************************************************************************************************************/
float fg_getTickRateCap();

/***********************************************************************************************************************
 * @brief Sets the tick-rate cap. Capping the tick rate to a low value reduces CPU usage.
 * @param p_val The new tick-rate cap. Set to -1 to disable the cap.
 * @throw std::invalid_argument If @p p_val is not -1 or > 0.
 * @sa fg_getTickRateCap
 **********************************************************************************************************************/
void fg_setTickRateCap(float p_val);

}